---
- name: Get MySQL version
  command: 'mysql --version'
  register: mysql_cli_version
  changed_when: false

- name: Ensure default user is present
  become: true
  mysql_user:
    name: "{{ mysql_user_username }}"
    host: 'localhost'
    password: "{{ mysql_user_password }}"
    priv: '*.*:ALL, GRANT'
    state: present
  when: mysql_user_username != mysql_root_username

# Has to be after the password assignment for idempotency (why??)
- name: Copy user-my.cnf file with password credentials
  become: true
  template:
    src: "user-my.cnf.j2"
    dest: "{{ mysql_user_home }}/.my.cnf"
    owner: "{{ mysql_user_username }}"
    mode: 0600
  when: mysql_user_username != mysql_root_username and (mysql_install_packages | bool or mysql_user_password_update)

- name: Disallow root login remotely
  become: true
  command: 'mysql -NBe "{{ item }} "'
  with_items:
    - DELETE FROM mysql.user WHERE User = '{{ mysql_root_username }}' and HOST  NOT IN ('localhost', '127.0.0.1', '::1')
  changed_when: false

- name: Get list of hosts for the root user
  become: true
  command: mysql -NBe "SELECT Host from mysql.user WHERE User= '{{ mysql_root_username }}' ORDER BY (Host='localhost') ASC"
  register: mysql_root_hosts
  changed_when: false
  check_mode: no
  when: mysql_packages_installed | bool or mysql_root_password_update

- name: Update MySQL root password for localhost root account
  become: true
  shell: >
     mysql -u root -NBe 'SET PASSWORD for "{{ mysql_root_username }}"@"{{ item }}" = PASSWORD("{{ mysql_root_password }}");'
  when: true

  with_items: "{{ mysql_root_hosts.stdout_lines | default([]) }}"
 #when: ((mysql_packages_installed | bool) or mysql_root_password_update) and ('5.7.' not in mysql_cli_version.stdout)

- name: Copy .my.cnf file with root password credentials
  become: true
  template:
    src: "root-my.cnf.j2"
    dest: "{{ mysql_root_home }}/.my.cnf"
    owner: root
    group: root
    mode: 0600
  when: mysql_packages_installed | bool or mysql_root_password_update

- name: Get list of hosts for the anonymous user.
  become: true
  command: mysql -NBe 'SELECT Host from mysql.user WHere User = ""'
  register: mysql_anonymous_hosts
  changed_when: false
  check_mode: no

- name: Remove anonymous MySQL users.
  become: true
  mysql_user:
    name: ""
    host: "{{ item }}"
    state: absent
  with_items: "{{ mysql_anonymous_hosts.stdout_lines|default([]) }}"

- name: Remove MySQL test database.
  become: true
  mysql_db: "name='test' state=absent"
